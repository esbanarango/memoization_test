// Generated by CoffeeScript 1.6.3
(function() {
  var cache_retrieve, cache_store, data, default_ttl, events, memoize;

  events = require("events");

  data = {};

  default_ttl = 5000;

  cache_store = function(callback, key, value) {
    if (callback) {
      callback(null, value);
    }
    return data[key] = value;
  };

  cache_retrieve = function(callback, key) {
    if (key === "2") {
      return setTimeout(callback, 3000, null, data[key]);
    } else {
      return callback(null, data[key]);
    }
  };

  memoize = function(slow_fn, opts) {
    var slice;
    if (opts == null) {
      opts = {};
    }
    if (typeof slow_fn === "function") {
      slice = Array.prototype.slice;
      return function() {
        var args, eventEmitter, input, sendCallback, slow_fn_callback, ttl;
        args = slice.call(arguments);
        slow_fn_callback = args[0];
        input = args[1];
        ttl = opts.ttl || default_ttl;
        eventEmitter = new events.EventEmitter();
        sendCallback = sendCallback = function(err, value, where_it_comes_from) {
          console.log("From " + where_it_comes_from);
          return slow_fn_callback(err, value);
        };
        eventEmitter.on("completed", sendCallback);
        process.nextTick(function() {
          return cache_retrieve((function(err, value) {
            if (value && value.ttl > Date.now()) {
              eventEmitter.emit("completed", err, value.value, "cache");
              return eventEmitter.removeAllListeners("completed");
            }
          }), input);
        });
        return process.nextTick(function() {
          return slow_fn.apply(this, [
            (function(err, value) {
              eventEmitter.emit("completed", err, value, "slow_function");
              eventEmitter.removeAllListeners("completed");
              return cache_store(null, input, {
                value: value,
                ttl: Date.now() + ttl
              });
            }), input
          ]);
        });
      };
    }
  };

  module.exports = memoize;

}).call(this);
