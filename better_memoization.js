// Generated by CoffeeScript 1.6.3
(function() {
  var cache_retrieve, cache_store, default_ttl, memoize;

  cache_store = {};

  default_ttl = 5000;

  cache_store = function(callback, key, value) {
    if (callback) {
      callback(null, value);
    }
    return cache_store[key] = value;
  };

  cache_retrieve = function(callback, key) {
    if (key === "2") {
      return setTimeout(callback, 3000, null, cache_store[key]);
    } else {
      return callback(null, cache_store[key]);
    }
  };

  memoize = function(slow_fn, opts) {
    if (opts == null) {
      opts = {};
    }
    if (typeof slow_fn === "function") {
      return function() {
        var input, sendCallback, slow_fn_callback, ttl;
        slow_fn_callback = arguments[0];
        input = arguments[1];
        ttl = opts.ttl || default_ttl;
        sendCallback = function(err, value, where_it_comes_from) {
          console.log("From " + where_it_comes_from);
          slow_fn_callback(err, value);
          return sendCallback = null;
        };
        process.nextTick(function() {
          return cache_retrieve((function(err, value) {
            if (sendCallback && value && value.ttl > Date.now()) {
              return sendCallback(err, value.data, "cache");
            }
          }), input);
        });
        return process.nextTick(function() {
          return slow_fn.apply(this, [
            (function(err, value) {
              if (sendCallback) {
                sendCallback(err, value, "slow_function");
              }
              return cache_store(null, input, {
                data: value,
                ttl: Date.now() + ttl
              });
            }), input
          ]);
        });
      };
    }
  };

  module.exports = memoize;

}).call(this);
